// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: engine.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineClient interface {
	HandShake(ctx context.Context, in *HandShakeRequest, opts ...grpc.CallOption) (*HandShakeResponse, error)
	HeartBeats(ctx context.Context, in *HeartBeatsRequest, opts ...grpc.CallOption) (*HeartBeatsResponse, error)
	GetNewJob(ctx context.Context, in *JobGetRequest, opts ...grpc.CallOption) (*JobGetResponse, error)
	PopulateJobResult(ctx context.Context, in *JobPopulateRequest, opts ...grpc.CallOption) (*JobPopulateResponse, error)
}

type engineClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineClient(cc grpc.ClientConnInterface) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) HandShake(ctx context.Context, in *HandShakeRequest, opts ...grpc.CallOption) (*HandShakeResponse, error) {
	out := new(HandShakeResponse)
	err := c.cc.Invoke(ctx, "/protobuf.engine/HandShake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) HeartBeats(ctx context.Context, in *HeartBeatsRequest, opts ...grpc.CallOption) (*HeartBeatsResponse, error) {
	out := new(HeartBeatsResponse)
	err := c.cc.Invoke(ctx, "/protobuf.engine/HeartBeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetNewJob(ctx context.Context, in *JobGetRequest, opts ...grpc.CallOption) (*JobGetResponse, error) {
	out := new(JobGetResponse)
	err := c.cc.Invoke(ctx, "/protobuf.engine/GetNewJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) PopulateJobResult(ctx context.Context, in *JobPopulateRequest, opts ...grpc.CallOption) (*JobPopulateResponse, error) {
	out := new(JobPopulateResponse)
	err := c.cc.Invoke(ctx, "/protobuf.engine/PopulateJobResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
// All implementations must embed UnimplementedEngineServer
// for forward compatibility
type EngineServer interface {
	HandShake(context.Context, *HandShakeRequest) (*HandShakeResponse, error)
	HeartBeats(context.Context, *HeartBeatsRequest) (*HeartBeatsResponse, error)
	GetNewJob(context.Context, *JobGetRequest) (*JobGetResponse, error)
	PopulateJobResult(context.Context, *JobPopulateRequest) (*JobPopulateResponse, error)
	mustEmbedUnimplementedEngineServer()
}

// UnimplementedEngineServer must be embedded to have forward compatible implementations.
type UnimplementedEngineServer struct {
}

func (UnimplementedEngineServer) HandShake(context.Context, *HandShakeRequest) (*HandShakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandShake not implemented")
}
func (UnimplementedEngineServer) HeartBeats(context.Context, *HeartBeatsRequest) (*HeartBeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeats not implemented")
}
func (UnimplementedEngineServer) GetNewJob(context.Context, *JobGetRequest) (*JobGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewJob not implemented")
}
func (UnimplementedEngineServer) PopulateJobResult(context.Context, *JobPopulateRequest) (*JobPopulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateJobResult not implemented")
}
func (UnimplementedEngineServer) mustEmbedUnimplementedEngineServer() {}

// UnsafeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServer will
// result in compilation errors.
type UnsafeEngineServer interface {
	mustEmbedUnimplementedEngineServer()
}

func RegisterEngineServer(s grpc.ServiceRegistrar, srv EngineServer) {
	s.RegisterService(&Engine_ServiceDesc, srv)
}

func _Engine_HandShake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandShakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).HandShake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.engine/HandShake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).HandShake(ctx, req.(*HandShakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_HeartBeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).HeartBeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.engine/HeartBeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).HeartBeats(ctx, req.(*HeartBeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetNewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetNewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.engine/GetNewJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetNewJob(ctx, req.(*JobGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_PopulateJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobPopulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).PopulateJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.engine/PopulateJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).PopulateJobResult(ctx, req.(*JobPopulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Engine_ServiceDesc is the grpc.ServiceDesc for Engine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Engine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandShake",
			Handler:    _Engine_HandShake_Handler,
		},
		{
			MethodName: "HeartBeats",
			Handler:    _Engine_HeartBeats_Handler,
		},
		{
			MethodName: "GetNewJob",
			Handler:    _Engine_GetNewJob_Handler,
		},
		{
			MethodName: "PopulateJobResult",
			Handler:    _Engine_PopulateJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine.proto",
}
